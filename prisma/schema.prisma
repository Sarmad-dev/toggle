generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  username            String              @unique
  password            String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  image               String?
  account             Account?
  subscription        Subscription?
  organization        Organization?       @relation(fields: [orgId], references: [id])
  orgId               String?
  projects            Project[]
  timeEntries         TimeEntry[]
  tasks               Task[]
  clients             Client[]
  teams               TeamMember[]
  role                UserRole            @default(USER)
  preferences         Json? // For storing user preferences like theme, notifications, etc.
  lastActive          DateTime?
  stripeId            String?             @unique // For payment processing
  managedProjects     Project[]           @relation("ManagedProjects")
  projectMemberships  ProjectMember[]
  notifications       Notification[]
  sentInvitations     ProjectInvitation[] @relation("invitedByUser")
  receivedInvitations ProjectInvitation[] @relation("invitedUser")
  chatMessages        ChatMessage[]
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  users     User[]
  clients   Client[]
  teams     Team[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  settings  Json? // Organization-wide settings
}

model Subscription {
  id               String             @id @default(cuid())
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan             SubscriptionPlan
  status           SubscriptionStatus
  currentPeriodEnd DateTime
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lemonSqueezyId   String?            @unique
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  TRIAL
}

model Project {
  id           String              @id @default(cuid())
  name         String
  description  String?
  color        String?
  billable     Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  client       Client?             @relation(fields: [clientId], references: [id])
  clientId     String?
  tasks        Task[]
  timeEntries  TimeEntry[]
  members      ProjectMember[]
  invitations  ProjectInvitation[]
  managerId    String // The user who manages this project
  manager      User                @relation("ManagedProjects", fields: [managerId], references: [id])
  user         User                @relation(fields: [userId], references: [id])
  userId       String
  teams        Team[]
  tags         Tag[]
  chatMessages ChatMessage[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  joinedAt  DateTime @default(now())

  @@unique([projectId, userId])
}

model ProjectInvitation {
  id          String   @id @default(cuid())
  projectId   String
  userId      String
  invitedById String
  status      String   @default("PENDING")
  project     Project  @relation(fields: [projectId], references: [id])
  user        User     @relation("invitedUser", fields: [userId], references: [id])
  invitedBy   User     @relation("invitedByUser", fields: [invitedById], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      String?
  createdAt DateTime        @default(now())
  read      Boolean         @default(false)
  user      User            @relation(fields: [userId], references: [id])
}

model Client {
  id           String       @id @default(cuid())
  name         String
  email        String?
  address      String?
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  projects     Project[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Task {
  id            String       @id @default(cuid())
  name          String
  description   String?
  priority      TaskPriority @default(MEDIUM)
  status        String       @default("TODO")
  dueDate       DateTime?
  projectId     String
  assignedTo    String?
  assignedToAll Boolean      @default(false)
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user          User?         @relation(fields: [assignedTo], references: [id])
  timeEntries   TimeEntry[]
  tags          Tag[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model TimeEntry {
  id          String    @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // Duration in seconds
  billable    Boolean   @default(true)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  taskId      String?
  task        Task?     @relation(fields: [taskId], references: [id])
  invoiceId   String?
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        Tag[]
}

model Team {
  id           String       @id @default(cuid())
  name         String
  description  String?
  orgId        String
  organization Organization @relation(fields: [orgId], references: [id])
  members      TeamMember[]
  projects     Project[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

model Tag {
  id          String      @id @default(cuid())
  name        String
  color       String?
  projects    Project[]
  tasks       Task[]
  timeEntries TimeEntry[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Invoice {
  id          String        @id @default(cuid())
  number      String        @unique
  status      InvoiceStatus @default(DRAFT)
  issueDate   DateTime
  dueDate     DateTime
  amount      Float
  currency    String        @default("USD")
  notes       String?
  timeEntries TimeEntry[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum Role {
  MANAGER
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum NotificationType {
  PROJECT_INVITATION
  PROJECT_MEMBER_ADDED
  INVITATION_ACCEPTED
  INVITATION_DECLINED
  TASK_ASSIGNED
  TASK_STATUS_CHANGED
}

model ChatMessage {
  id        String    @id @default(cuid())
  content   String
  userId    String
  projectId String
  fileUrl   String?
  fileName  String?
  fileType  String?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  project   Project   @relation(fields: [projectId], references: [id])
  replyTo   ChatMessage?  @relation("Replies", fields: [replyToId], references: [id])
  replyToId String?
  replies   ChatMessage[] @relation("Replies")

  @@index([userId])
  @@index([projectId])
  @@index([replyToId])
}
